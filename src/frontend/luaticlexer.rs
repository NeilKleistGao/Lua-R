// Generated from luatic.g4 by ANTLR 4.8
#![allow(dead_code)]
#![allow(nonstandard_style)]
#![allow(unused_imports)]
#![allow(unused_variables)]
use antlr_rust::atn::ATN;
use antlr_rust::char_stream::CharStream;
use antlr_rust::int_stream::IntStream;
use antlr_rust::lexer::{BaseLexer, Lexer, LexerRecog};
use antlr_rust::atn_deserializer::ATNDeserializer;
use antlr_rust::dfa::DFA;
use antlr_rust::lexer_atn_simulator::{LexerATNSimulator, ILexerATNSimulator};
use antlr_rust::PredictionContextCache;
use antlr_rust::recognizer::{Recognizer,Actions};
use antlr_rust::error_listener::ErrorListener;
use antlr_rust::TokenSource;
use antlr_rust::token_factory::{TokenFactory,CommonTokenFactory,TokenAware};
use antlr_rust::token::*;
use antlr_rust::rule_context::{BaseRuleContext,EmptyCustomRuleContext,EmptyContext};
use antlr_rust::parser_rule_context::{ParserRuleContext,BaseParserRuleContext,cast};
use antlr_rust::vocabulary::{Vocabulary,VocabularyImpl};

use antlr_rust::{lazy_static,Tid,TidAble,TidExt};

use std::sync::Arc;
use std::cell::RefCell;
use std::rc::Rc;
use std::marker::PhantomData;
use std::ops::{Deref, DerefMut};


	pub const KW_GLOBAL:isize=1; 
	pub const KW_TRUE:isize=2; 
	pub const KW_FALSE:isize=3; 
	pub const PT_SEMI:isize=4; 
	pub const PT_EQL:isize=5; 
	pub const PT_LT:isize=6; 
	pub const PT_RT:isize=7; 
	pub const PT_LP:isize=8; 
	pub const PT_RP:isize=9; 
	pub const PT_LB:isize=10; 
	pub const PT_RB:isize=11; 
	pub const PT_LS:isize=12; 
	pub const PT_RS:isize=13; 
	pub const IDENT:isize=14; 
	pub const NORMALSTRING:isize=15; 
	pub const INT:isize=16; 
	pub const HEX:isize=17; 
	pub const FLOAT:isize=18; 
	pub const HEX_FLOAT:isize=19; 
	pub const WS:isize=20;
	pub const channelNames: [&'static str;0+2] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	];

	pub const modeNames: [&'static str;1] = [
		"DEFAULT_MODE"
	];

	pub const ruleNames: [&'static str;28] = [
		"KW_GLOBAL", "KW_TRUE", "KW_FALSE", "PT_SEMI", "PT_EQL", "PT_LT", "PT_RT", 
		"PT_LP", "PT_RP", "PT_LB", "PT_RB", "PT_LS", "PT_RS", "IDENT", "NORMALSTRING", 
		"INT", "HEX", "FLOAT", "HEX_FLOAT", "ExponentPart", "HexExponentPart", 
		"DecimalEscape", "EscapeSequence", "HexEscape", "UtfEscape", "Digit", 
		"HexDigit", "WS"
	];


	pub const _LITERAL_NAMES: [Option<&'static str>;14] = [
		None, Some("'global'"), Some("'true'"), Some("'false'"), Some("';'"), 
		Some("'='"), Some("'<'"), Some("'>'"), Some("'('"), Some("')'"), Some("'{'"), 
		Some("'}'"), Some("'['"), Some("']'")
	];
	pub const _SYMBOLIC_NAMES: [Option<&'static str>;21]  = [
		None, Some("KW_GLOBAL"), Some("KW_TRUE"), Some("KW_FALSE"), Some("PT_SEMI"), 
		Some("PT_EQL"), Some("PT_LT"), Some("PT_RT"), Some("PT_LP"), Some("PT_RP"), 
		Some("PT_LB"), Some("PT_RB"), Some("PT_LS"), Some("PT_RS"), Some("IDENT"), 
		Some("NORMALSTRING"), Some("INT"), Some("HEX"), Some("FLOAT"), Some("HEX_FLOAT"), 
		Some("WS")
	];
	lazy_static!{
	    static ref _shared_context_cache: Arc<PredictionContextCache> = Arc::new(PredictionContextCache::new());
		static ref VOCABULARY: Box<dyn Vocabulary> = Box::new(VocabularyImpl::new(_LITERAL_NAMES.iter(), _SYMBOLIC_NAMES.iter(), None));
	}


pub type LexerContext<'input> = BaseRuleContext<'input,EmptyCustomRuleContext<'input,LocalTokenFactory<'input> >>;
pub type LocalTokenFactory<'input> = CommonTokenFactory;

type From<'a> = <LocalTokenFactory<'a> as TokenFactory<'a> >::From;

pub struct luaticLexer<'input, Input:CharStream<From<'input> >> {
	base: BaseLexer<'input,luaticLexerActions,Input,LocalTokenFactory<'input>>,
}

antlr_rust::tid! { impl<'input,Input> TidAble<'input> for luaticLexer<'input,Input> where Input:CharStream<From<'input> > }

impl<'input, Input:CharStream<From<'input> >> Deref for luaticLexer<'input,Input>{
	type Target = BaseLexer<'input,luaticLexerActions,Input,LocalTokenFactory<'input>>;

	fn deref(&self) -> &Self::Target {
		&self.base
	}
}

impl<'input, Input:CharStream<From<'input> >> DerefMut for luaticLexer<'input,Input>{
	fn deref_mut(&mut self) -> &mut Self::Target {
		&mut self.base
	}
}


impl<'input, Input:CharStream<From<'input> >> luaticLexer<'input,Input>{
    fn get_rule_names(&self) -> &'static [&'static str] {
        &ruleNames
    }
    fn get_literal_names(&self) -> &[Option<&str>] {
        &_LITERAL_NAMES
    }

    fn get_symbolic_names(&self) -> &[Option<&str>] {
        &_SYMBOLIC_NAMES
    }

    fn get_grammar_file_name(&self) -> &'static str {
        "luaticLexer.g4"
    }

	pub fn new_with_token_factory(input: Input, tf: &'input LocalTokenFactory<'input>) -> Self {
		antlr_rust::recognizer::check_version("0","3");
    	Self {
			base: BaseLexer::new_base_lexer(
				input,
				LexerATNSimulator::new_lexer_atnsimulator(
					_ATN.clone(),
					_decision_to_DFA.clone(),
					_shared_context_cache.clone(),
				),
				luaticLexerActions{},
				tf
			)
	    }
	}
}

impl<'input, Input:CharStream<From<'input> >> luaticLexer<'input,Input> where &'input LocalTokenFactory<'input>:Default{
	pub fn new(input: Input) -> Self{
		luaticLexer::new_with_token_factory(input, <&LocalTokenFactory<'input> as Default>::default())
	}
}

pub struct luaticLexerActions {
}

impl luaticLexerActions{
}

impl<'input, Input:CharStream<From<'input> >> Actions<'input,BaseLexer<'input,luaticLexerActions,Input,LocalTokenFactory<'input>>> for luaticLexerActions{
	}

	impl<'input, Input:CharStream<From<'input> >> luaticLexer<'input,Input>{

}

impl<'input, Input:CharStream<From<'input> >> LexerRecog<'input,BaseLexer<'input,luaticLexerActions,Input,LocalTokenFactory<'input>>> for luaticLexerActions{
}
impl<'input> TokenAware<'input> for luaticLexerActions{
	type TF = LocalTokenFactory<'input>;
}

impl<'input, Input:CharStream<From<'input> >> TokenSource<'input> for luaticLexer<'input,Input>{
	type TF = LocalTokenFactory<'input>;

    fn next_token(&mut self) -> <Self::TF as TokenFactory<'input>>::Tok {
        self.base.next_token()
    }

    fn get_line(&self) -> isize {
        self.base.get_line()
    }

    fn get_char_position_in_line(&self) -> isize {
        self.base.get_char_position_in_line()
    }

    fn get_input_stream(&mut self) -> Option<&mut dyn IntStream> {
        self.base.get_input_stream()
    }

	fn get_source_name(&self) -> String {
		self.base.get_source_name()
	}

    fn get_token_factory(&self) -> &'input Self::TF {
        self.base.get_token_factory()
    }
}



	lazy_static! {
	    static ref _ATN: Arc<ATN> =
	        Arc::new(ATNDeserializer::new(None).deserialize(_serializedATN.chars()));
	    static ref _decision_to_DFA: Arc<Vec<antlr_rust::RwLock<DFA>>> = {
	        let mut dfa = Vec::new();
	        let size = _ATN.decision_to_state.len();
	        for i in 0..size {
	            dfa.push(DFA::new(
	                _ATN.clone(),
	                _ATN.get_decision_state(i),
	                i as isize,
	            ).into())
	        }
	        Arc::new(dfa)
	    };
	}



	const _serializedATN:&'static str =
		"\x03\u{608b}\u{a72a}\u{8133}\u{b9ed}\u{417c}\u{3be7}\u{7786}\u{5964}\x02\
		\x16\u{10c}\x08\x01\x04\x02\x09\x02\x04\x03\x09\x03\x04\x04\x09\x04\x04\
		\x05\x09\x05\x04\x06\x09\x06\x04\x07\x09\x07\x04\x08\x09\x08\x04\x09\x09\
		\x09\x04\x0a\x09\x0a\x04\x0b\x09\x0b\x04\x0c\x09\x0c\x04\x0d\x09\x0d\x04\
		\x0e\x09\x0e\x04\x0f\x09\x0f\x04\x10\x09\x10\x04\x11\x09\x11\x04\x12\x09\
		\x12\x04\x13\x09\x13\x04\x14\x09\x14\x04\x15\x09\x15\x04\x16\x09\x16\x04\
		\x17\x09\x17\x04\x18\x09\x18\x04\x19\x09\x19\x04\x1a\x09\x1a\x04\x1b\x09\
		\x1b\x04\x1c\x09\x1c\x04\x1d\x09\x1d\x03\x02\x03\x02\x03\x02\x03\x02\x03\
		\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\
		\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\
		\x07\x03\x07\x03\x08\x03\x08\x03\x09\x03\x09\x03\x0a\x03\x0a\x03\x0b\x03\
		\x0b\x03\x0c\x03\x0c\x03\x0d\x03\x0d\x03\x0e\x03\x0e\x03\x0f\x03\x0f\x07\
		\x0f\x64\x0a\x0f\x0c\x0f\x0e\x0f\x67\x0b\x0f\x03\x10\x03\x10\x03\x10\x07\
		\x10\x6c\x0a\x10\x0c\x10\x0e\x10\x6f\x0b\x10\x03\x10\x03\x10\x03\x11\x06\
		\x11\x74\x0a\x11\x0d\x11\x0e\x11\x75\x03\x12\x03\x12\x03\x12\x06\x12\x7b\
		\x0a\x12\x0d\x12\x0e\x12\x7c\x03\x13\x06\x13\u{80}\x0a\x13\x0d\x13\x0e\
		\x13\u{81}\x03\x13\x03\x13\x07\x13\u{86}\x0a\x13\x0c\x13\x0e\x13\u{89}\
		\x0b\x13\x03\x13\x05\x13\u{8c}\x0a\x13\x03\x13\x03\x13\x06\x13\u{90}\x0a\
		\x13\x0d\x13\x0e\x13\u{91}\x03\x13\x05\x13\u{95}\x0a\x13\x03\x13\x06\x13\
		\u{98}\x0a\x13\x0d\x13\x0e\x13\u{99}\x03\x13\x03\x13\x05\x13\u{9e}\x0a\
		\x13\x03\x14\x03\x14\x03\x14\x06\x14\u{a3}\x0a\x14\x0d\x14\x0e\x14\u{a4}\
		\x03\x14\x03\x14\x07\x14\u{a9}\x0a\x14\x0c\x14\x0e\x14\u{ac}\x0b\x14\x03\
		\x14\x05\x14\u{af}\x0a\x14\x03\x14\x03\x14\x03\x14\x03\x14\x06\x14\u{b5}\
		\x0a\x14\x0d\x14\x0e\x14\u{b6}\x03\x14\x05\x14\u{ba}\x0a\x14\x03\x14\x03\
		\x14\x03\x14\x06\x14\u{bf}\x0a\x14\x0d\x14\x0e\x14\u{c0}\x03\x14\x03\x14\
		\x05\x14\u{c5}\x0a\x14\x03\x15\x03\x15\x05\x15\u{c9}\x0a\x15\x03\x15\x06\
		\x15\u{cc}\x0a\x15\x0d\x15\x0e\x15\u{cd}\x03\x16\x03\x16\x05\x16\u{d2}\
		\x0a\x16\x03\x16\x06\x16\u{d5}\x0a\x16\x0d\x16\x0e\x16\u{d6}\x03\x17\x03\
		\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\
		\x17\x05\x17\u{e4}\x0a\x17\x03\x18\x03\x18\x03\x18\x03\x18\x05\x18\u{ea}\
		\x0a\x18\x03\x18\x03\x18\x03\x18\x03\x18\x05\x18\u{f0}\x0a\x18\x03\x19\
		\x03\x19\x03\x19\x03\x19\x03\x19\x03\x1a\x03\x1a\x03\x1a\x03\x1a\x03\x1a\
		\x06\x1a\u{fc}\x0a\x1a\x0d\x1a\x0e\x1a\u{fd}\x03\x1a\x03\x1a\x03\x1b\x03\
		\x1b\x03\x1c\x03\x1c\x03\x1d\x06\x1d\u{107}\x0a\x1d\x0d\x1d\x0e\x1d\u{108}\
		\x03\x1d\x03\x1d\x02\x02\x1e\x03\x03\x05\x04\x07\x05\x09\x06\x0b\x07\x0d\
		\x08\x0f\x09\x11\x0a\x13\x0b\x15\x0c\x17\x0d\x19\x0e\x1b\x0f\x1d\x10\x1f\
		\x11\x21\x12\x23\x13\x25\x14\x27\x15\x29\x02\x2b\x02\x2d\x02\x2f\x02\x31\
		\x02\x33\x02\x35\x02\x37\x02\x39\x16\x03\x02\x0e\x05\x02\x43\x5c\x61\x61\
		\x63\x7c\x06\x02\x32\x3b\x43\x5c\x61\x61\x63\x7c\x04\x02\x24\x24\x5e\x5e\
		\x04\x02\x5a\x5a\x7a\x7a\x04\x02\x47\x47\x67\x67\x04\x02\x2d\x2d\x2f\x2f\
		\x04\x02\x52\x52\x72\x72\x03\x02\x32\x34\x0c\x02\x24\x24\x29\x29\x5e\x5e\
		\x63\x64\x68\x68\x70\x70\x74\x74\x76\x76\x78\x78\x7c\x7c\x03\x02\x32\x3b\
		\x05\x02\x32\x3b\x43\x48\x63\x68\x05\x02\x0b\x0c\x0e\x0f\x22\x22\x02\u{125}\
		\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\
		\x02\x09\x03\x02\x02\x02\x02\x0b\x03\x02\x02\x02\x02\x0d\x03\x02\x02\x02\
		\x02\x0f\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\
		\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\
		\x02\x1b\x03\x02\x02\x02\x02\x1d\x03\x02\x02\x02\x02\x1f\x03\x02\x02\x02\
		\x02\x21\x03\x02\x02\x02\x02\x23\x03\x02\x02\x02\x02\x25\x03\x02\x02\x02\
		\x02\x27\x03\x02\x02\x02\x02\x39\x03\x02\x02\x02\x03\x3b\x03\x02\x02\x02\
		\x05\x42\x03\x02\x02\x02\x07\x47\x03\x02\x02\x02\x09\x4d\x03\x02\x02\x02\
		\x0b\x4f\x03\x02\x02\x02\x0d\x51\x03\x02\x02\x02\x0f\x53\x03\x02\x02\x02\
		\x11\x55\x03\x02\x02\x02\x13\x57\x03\x02\x02\x02\x15\x59\x03\x02\x02\x02\
		\x17\x5b\x03\x02\x02\x02\x19\x5d\x03\x02\x02\x02\x1b\x5f\x03\x02\x02\x02\
		\x1d\x61\x03\x02\x02\x02\x1f\x68\x03\x02\x02\x02\x21\x73\x03\x02\x02\x02\
		\x23\x77\x03\x02\x02\x02\x25\u{9d}\x03\x02\x02\x02\x27\u{c4}\x03\x02\x02\
		\x02\x29\u{c6}\x03\x02\x02\x02\x2b\u{cf}\x03\x02\x02\x02\x2d\u{e3}\x03\
		\x02\x02\x02\x2f\u{ef}\x03\x02\x02\x02\x31\u{f1}\x03\x02\x02\x02\x33\u{f6}\
		\x03\x02\x02\x02\x35\u{101}\x03\x02\x02\x02\x37\u{103}\x03\x02\x02\x02\
		\x39\u{106}\x03\x02\x02\x02\x3b\x3c\x07\x69\x02\x02\x3c\x3d\x07\x6e\x02\
		\x02\x3d\x3e\x07\x71\x02\x02\x3e\x3f\x07\x64\x02\x02\x3f\x40\x07\x63\x02\
		\x02\x40\x41\x07\x6e\x02\x02\x41\x04\x03\x02\x02\x02\x42\x43\x07\x76\x02\
		\x02\x43\x44\x07\x74\x02\x02\x44\x45\x07\x77\x02\x02\x45\x46\x07\x67\x02\
		\x02\x46\x06\x03\x02\x02\x02\x47\x48\x07\x68\x02\x02\x48\x49\x07\x63\x02\
		\x02\x49\x4a\x07\x6e\x02\x02\x4a\x4b\x07\x75\x02\x02\x4b\x4c\x07\x67\x02\
		\x02\x4c\x08\x03\x02\x02\x02\x4d\x4e\x07\x3d\x02\x02\x4e\x0a\x03\x02\x02\
		\x02\x4f\x50\x07\x3f\x02\x02\x50\x0c\x03\x02\x02\x02\x51\x52\x07\x3e\x02\
		\x02\x52\x0e\x03\x02\x02\x02\x53\x54\x07\x40\x02\x02\x54\x10\x03\x02\x02\
		\x02\x55\x56\x07\x2a\x02\x02\x56\x12\x03\x02\x02\x02\x57\x58\x07\x2b\x02\
		\x02\x58\x14\x03\x02\x02\x02\x59\x5a\x07\x7d\x02\x02\x5a\x16\x03\x02\x02\
		\x02\x5b\x5c\x07\x7f\x02\x02\x5c\x18\x03\x02\x02\x02\x5d\x5e\x07\x5d\x02\
		\x02\x5e\x1a\x03\x02\x02\x02\x5f\x60\x07\x5f\x02\x02\x60\x1c\x03\x02\x02\
		\x02\x61\x65\x09\x02\x02\x02\x62\x64\x09\x03\x02\x02\x63\x62\x03\x02\x02\
		\x02\x64\x67\x03\x02\x02\x02\x65\x63\x03\x02\x02\x02\x65\x66\x03\x02\x02\
		\x02\x66\x1e\x03\x02\x02\x02\x67\x65\x03\x02\x02\x02\x68\x6d\x07\x24\x02\
		\x02\x69\x6c\x05\x2f\x18\x02\x6a\x6c\x0a\x04\x02\x02\x6b\x69\x03\x02\x02\
		\x02\x6b\x6a\x03\x02\x02\x02\x6c\x6f\x03\x02\x02\x02\x6d\x6b\x03\x02\x02\
		\x02\x6d\x6e\x03\x02\x02\x02\x6e\x70\x03\x02\x02\x02\x6f\x6d\x03\x02\x02\
		\x02\x70\x71\x07\x24\x02\x02\x71\x20\x03\x02\x02\x02\x72\x74\x05\x35\x1b\
		\x02\x73\x72\x03\x02\x02\x02\x74\x75\x03\x02\x02\x02\x75\x73\x03\x02\x02\
		\x02\x75\x76\x03\x02\x02\x02\x76\x22\x03\x02\x02\x02\x77\x78\x07\x32\x02\
		\x02\x78\x7a\x09\x05\x02\x02\x79\x7b\x05\x37\x1c\x02\x7a\x79\x03\x02\x02\
		\x02\x7b\x7c\x03\x02\x02\x02\x7c\x7a\x03\x02\x02\x02\x7c\x7d\x03\x02\x02\
		\x02\x7d\x24\x03\x02\x02\x02\x7e\u{80}\x05\x35\x1b\x02\x7f\x7e\x03\x02\
		\x02\x02\u{80}\u{81}\x03\x02\x02\x02\u{81}\x7f\x03\x02\x02\x02\u{81}\u{82}\
		\x03\x02\x02\x02\u{82}\u{83}\x03\x02\x02\x02\u{83}\u{87}\x07\x30\x02\x02\
		\u{84}\u{86}\x05\x35\x1b\x02\u{85}\u{84}\x03\x02\x02\x02\u{86}\u{89}\x03\
		\x02\x02\x02\u{87}\u{85}\x03\x02\x02\x02\u{87}\u{88}\x03\x02\x02\x02\u{88}\
		\u{8b}\x03\x02\x02\x02\u{89}\u{87}\x03\x02\x02\x02\u{8a}\u{8c}\x05\x29\
		\x15\x02\u{8b}\u{8a}\x03\x02\x02\x02\u{8b}\u{8c}\x03\x02\x02\x02\u{8c}\
		\u{9e}\x03\x02\x02\x02\u{8d}\u{8f}\x07\x30\x02\x02\u{8e}\u{90}\x05\x35\
		\x1b\x02\u{8f}\u{8e}\x03\x02\x02\x02\u{90}\u{91}\x03\x02\x02\x02\u{91}\
		\u{8f}\x03\x02\x02\x02\u{91}\u{92}\x03\x02\x02\x02\u{92}\u{94}\x03\x02\
		\x02\x02\u{93}\u{95}\x05\x29\x15\x02\u{94}\u{93}\x03\x02\x02\x02\u{94}\
		\u{95}\x03\x02\x02\x02\u{95}\u{9e}\x03\x02\x02\x02\u{96}\u{98}\x05\x35\
		\x1b\x02\u{97}\u{96}\x03\x02\x02\x02\u{98}\u{99}\x03\x02\x02\x02\u{99}\
		\u{97}\x03\x02\x02\x02\u{99}\u{9a}\x03\x02\x02\x02\u{9a}\u{9b}\x03\x02\
		\x02\x02\u{9b}\u{9c}\x05\x29\x15\x02\u{9c}\u{9e}\x03\x02\x02\x02\u{9d}\
		\x7f\x03\x02\x02\x02\u{9d}\u{8d}\x03\x02\x02\x02\u{9d}\u{97}\x03\x02\x02\
		\x02\u{9e}\x26\x03\x02\x02\x02\u{9f}\u{a0}\x07\x32\x02\x02\u{a0}\u{a2}\
		\x09\x05\x02\x02\u{a1}\u{a3}\x05\x37\x1c\x02\u{a2}\u{a1}\x03\x02\x02\x02\
		\u{a3}\u{a4}\x03\x02\x02\x02\u{a4}\u{a2}\x03\x02\x02\x02\u{a4}\u{a5}\x03\
		\x02\x02\x02\u{a5}\u{a6}\x03\x02\x02\x02\u{a6}\u{aa}\x07\x30\x02\x02\u{a7}\
		\u{a9}\x05\x37\x1c\x02\u{a8}\u{a7}\x03\x02\x02\x02\u{a9}\u{ac}\x03\x02\
		\x02\x02\u{aa}\u{a8}\x03\x02\x02\x02\u{aa}\u{ab}\x03\x02\x02\x02\u{ab}\
		\u{ae}\x03\x02\x02\x02\u{ac}\u{aa}\x03\x02\x02\x02\u{ad}\u{af}\x05\x2b\
		\x16\x02\u{ae}\u{ad}\x03\x02\x02\x02\u{ae}\u{af}\x03\x02\x02\x02\u{af}\
		\u{c5}\x03\x02\x02\x02\u{b0}\u{b1}\x07\x32\x02\x02\u{b1}\u{b2}\x09\x05\
		\x02\x02\u{b2}\u{b4}\x07\x30\x02\x02\u{b3}\u{b5}\x05\x37\x1c\x02\u{b4}\
		\u{b3}\x03\x02\x02\x02\u{b5}\u{b6}\x03\x02\x02\x02\u{b6}\u{b4}\x03\x02\
		\x02\x02\u{b6}\u{b7}\x03\x02\x02\x02\u{b7}\u{b9}\x03\x02\x02\x02\u{b8}\
		\u{ba}\x05\x2b\x16\x02\u{b9}\u{b8}\x03\x02\x02\x02\u{b9}\u{ba}\x03\x02\
		\x02\x02\u{ba}\u{c5}\x03\x02\x02\x02\u{bb}\u{bc}\x07\x32\x02\x02\u{bc}\
		\u{be}\x09\x05\x02\x02\u{bd}\u{bf}\x05\x37\x1c\x02\u{be}\u{bd}\x03\x02\
		\x02\x02\u{bf}\u{c0}\x03\x02\x02\x02\u{c0}\u{be}\x03\x02\x02\x02\u{c0}\
		\u{c1}\x03\x02\x02\x02\u{c1}\u{c2}\x03\x02\x02\x02\u{c2}\u{c3}\x05\x2b\
		\x16\x02\u{c3}\u{c5}\x03\x02\x02\x02\u{c4}\u{9f}\x03\x02\x02\x02\u{c4}\
		\u{b0}\x03\x02\x02\x02\u{c4}\u{bb}\x03\x02\x02\x02\u{c5}\x28\x03\x02\x02\
		\x02\u{c6}\u{c8}\x09\x06\x02\x02\u{c7}\u{c9}\x09\x07\x02\x02\u{c8}\u{c7}\
		\x03\x02\x02\x02\u{c8}\u{c9}\x03\x02\x02\x02\u{c9}\u{cb}\x03\x02\x02\x02\
		\u{ca}\u{cc}\x05\x35\x1b\x02\u{cb}\u{ca}\x03\x02\x02\x02\u{cc}\u{cd}\x03\
		\x02\x02\x02\u{cd}\u{cb}\x03\x02\x02\x02\u{cd}\u{ce}\x03\x02\x02\x02\u{ce}\
		\x2a\x03\x02\x02\x02\u{cf}\u{d1}\x09\x08\x02\x02\u{d0}\u{d2}\x09\x07\x02\
		\x02\u{d1}\u{d0}\x03\x02\x02\x02\u{d1}\u{d2}\x03\x02\x02\x02\u{d2}\u{d4}\
		\x03\x02\x02\x02\u{d3}\u{d5}\x05\x35\x1b\x02\u{d4}\u{d3}\x03\x02\x02\x02\
		\u{d5}\u{d6}\x03\x02\x02\x02\u{d6}\u{d4}\x03\x02\x02\x02\u{d6}\u{d7}\x03\
		\x02\x02\x02\u{d7}\x2c\x03\x02\x02\x02\u{d8}\u{d9}\x07\x5e\x02\x02\u{d9}\
		\u{e4}\x05\x35\x1b\x02\u{da}\u{db}\x07\x5e\x02\x02\u{db}\u{dc}\x05\x35\
		\x1b\x02\u{dc}\u{dd}\x05\x35\x1b\x02\u{dd}\u{e4}\x03\x02\x02\x02\u{de}\
		\u{df}\x07\x5e\x02\x02\u{df}\u{e0}\x09\x09\x02\x02\u{e0}\u{e1}\x05\x35\
		\x1b\x02\u{e1}\u{e2}\x05\x35\x1b\x02\u{e2}\u{e4}\x03\x02\x02\x02\u{e3}\
		\u{d8}\x03\x02\x02\x02\u{e3}\u{da}\x03\x02\x02\x02\u{e3}\u{de}\x03\x02\
		\x02\x02\u{e4}\x2e\x03\x02\x02\x02\u{e5}\u{e6}\x07\x5e\x02\x02\u{e6}\u{f0}\
		\x09\x0a\x02\x02\u{e7}\u{e9}\x07\x5e\x02\x02\u{e8}\u{ea}\x07\x0f\x02\x02\
		\u{e9}\u{e8}\x03\x02\x02\x02\u{e9}\u{ea}\x03\x02\x02\x02\u{ea}\u{eb}\x03\
		\x02\x02\x02\u{eb}\u{f0}\x07\x0c\x02\x02\u{ec}\u{f0}\x05\x2d\x17\x02\u{ed}\
		\u{f0}\x05\x31\x19\x02\u{ee}\u{f0}\x05\x33\x1a\x02\u{ef}\u{e5}\x03\x02\
		\x02\x02\u{ef}\u{e7}\x03\x02\x02\x02\u{ef}\u{ec}\x03\x02\x02\x02\u{ef}\
		\u{ed}\x03\x02\x02\x02\u{ef}\u{ee}\x03\x02\x02\x02\u{f0}\x30\x03\x02\x02\
		\x02\u{f1}\u{f2}\x07\x5e\x02\x02\u{f2}\u{f3}\x07\x7a\x02\x02\u{f3}\u{f4}\
		\x05\x37\x1c\x02\u{f4}\u{f5}\x05\x37\x1c\x02\u{f5}\x32\x03\x02\x02\x02\
		\u{f6}\u{f7}\x07\x5e\x02\x02\u{f7}\u{f8}\x07\x77\x02\x02\u{f8}\u{f9}\x07\
		\x7d\x02\x02\u{f9}\u{fb}\x03\x02\x02\x02\u{fa}\u{fc}\x05\x37\x1c\x02\u{fb}\
		\u{fa}\x03\x02\x02\x02\u{fc}\u{fd}\x03\x02\x02\x02\u{fd}\u{fb}\x03\x02\
		\x02\x02\u{fd}\u{fe}\x03\x02\x02\x02\u{fe}\u{ff}\x03\x02\x02\x02\u{ff}\
		\u{100}\x07\x7f\x02\x02\u{100}\x34\x03\x02\x02\x02\u{101}\u{102}\x09\x0b\
		\x02\x02\u{102}\x36\x03\x02\x02\x02\u{103}\u{104}\x09\x0c\x02\x02\u{104}\
		\x38\x03\x02\x02\x02\u{105}\u{107}\x09\x0d\x02\x02\u{106}\u{105}\x03\x02\
		\x02\x02\u{107}\u{108}\x03\x02\x02\x02\u{108}\u{106}\x03\x02\x02\x02\u{108}\
		\u{109}\x03\x02\x02\x02\u{109}\u{10a}\x03\x02\x02\x02\u{10a}\u{10b}\x08\
		\x1d\x02\x02\u{10b}\x3a\x03\x02\x02\x02\x1f\x02\x65\x6b\x6d\x75\x7c\u{81}\
		\u{87}\u{8b}\u{91}\u{94}\u{99}\u{9d}\u{a4}\u{aa}\u{ae}\u{b6}\u{b9}\u{c0}\
		\u{c4}\u{c8}\u{cd}\u{d1}\u{d6}\u{e3}\u{e9}\u{ef}\u{fd}\u{108}\x03\x02\x03\
		\x02";
